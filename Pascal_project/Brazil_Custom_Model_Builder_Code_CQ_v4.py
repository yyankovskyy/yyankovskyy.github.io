
#'#*****************************************************************************************************************************************************
''# Project name  				: Intelligent Classifier
''# File Name   				: Updated_Python_Code_template.py 
''# Date of Updation    		: 09 Nov 2019
''# Purpose       				: Python Code Template for Upload into Intelligent Classifier Solution
''# Created By      			: Eugene Yankovsky
#'#***************************************************************************************************************************************************** 

#SPECIFY PACKAGES USED:
#---------------------#

#@packages used
import pandas as pd
import nltk
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import SGDClassifier
from sklearn import metrics
import pickle
import os
from unidecode import unidecode

#from sklearn.ensemble import RandomForestClassifier
#import time
#import re

#Download two packages for text mining in Portuguese
#nltk.download('stopwords')
#nltk.download('rslp')

#---------------------------------------------------------------#
  

#Training_Data = pd.read_pickle('C:\\Users\\Desktop\\Foundry\\Sample Data\\input_dataframe.pkl')
 
#PRE-PROCESSING STEP



#PRE-PROCESSING STEP
#'#****************************************************************************************************************************************************
''# Description  					: Code to perform the cleansing & transformation steps on the data before model training & prediction
''# Steps Followed					: Includes Stemming,Lemmatization, stop words removal, entity  normalization, engineered features,vectorisation
''# Input Parameters      			: Input dataframe   $consolidated data for model training as dataframe
''# Output Parameters   			: Processed dataframe,Target_class / label,Vectorized Data, Function execution success flag,Function execution Status Description
''# Author     						: Eugene Yankovsky
#'#****************************************************************************************************************************************************


#Define Pre-processing function below:
#-------------------------------------#

def pre_processing(input_dataframe, Training_Data):
    
    target_class =""
    processed_dataframe = ""
    vectorized_data = ''  
    Required_Columns = ['TARIFF CODE', 'PRODUCT DESCRIPTION']
    Missing_Columns=[item for item in Required_Columns if item not in input_dataframe.columns]
    if len(Missing_Columns)>0:
        Status_desc = "Missing required column(s) : "+",".join(Missing_Columns)
        success_flag = 'no'
        return(processed_dataframe,target_class,vectorized_data,success_flag, Status_desc)
        raise Exception('Missing Column error!')
    try: 	
         
        stopwords = nltk.corpus.stopwords.words('portuguese')
        stopwords_noaccent = [unidecode(w) for w in stopwords]
        
        def data_cleaning(df):
            PD = df['PRODUCT DESCRIPTION'].astype('str')
            PD = df['PRODUCT DESCRIPTION'].str.lower() # change everything to lowercase
            PD = PD.astype('str')
            PD = PD.apply(unidecode)
            PD = PD.str.replace('\'', '', case=False)
            PD = PD.str.replace('[^A-Za-z0-9\s]+', ' ', case=False) #remove special characters
            PD = PD.str.replace('\d+\.?\d*', '', case=False) # remove numbers          
            PD = PD.str.replace(r'\b\w{1}\b', '', case=False) # remove words with only one character
            PD = PD.str.split() # split descriptions into words
            PD = PD.apply(lambda x: [w for w in x if not w in stopwords_noaccent]) # remove stopwords
            PDclean = PD.apply(lambda x: " ".join(x)).tolist()
            return PDclean
    
        tfidf_vectorizer = TfidfVectorizer(min_df=1, 
                                     norm='l2', 
                                     max_features=300000, 
                                     smooth_idf=True, 
                                     use_idf=True, 
                                     ngram_range=(1,2))

        corpus = Training_Data['PRODUCT DESCRIPTION'].copy().astype('str')
        vectorizer_fit = tfidf_vectorizer.fit(corpus)
        input_dataframe['CLEANED PRODUCT DESCRIPTION'] = data_cleaning(input_dataframe)
        vectorized_data= vectorizer_fit.transform(input_dataframe['CLEANED PRODUCT DESCRIPTION'])        
        processed_dataframe=input_dataframe
        target_class = processed_dataframe['TARIFF CODE'].copy().astype('str')
        success_flag = 'yes'
        Status_desc = 'Preprocessing Successfully Completed'	        
        
    except Exception as error_desc:         
        Status_desc = error_desc
        success_flag = 'no'
        tfidf_vectorizer = ''
        
    return(processed_dataframe, target_class, vectorized_data, success_flag, Status_desc)

#---------------------------------------------------------------------#

# MODEL TRAINING:

# MODEL TRAINING:

#'#****************************************************************************************************************************************************
''# Description  					: Code to perform model training process
''# Steps Followed					: Includes model algorithm execution & model file creation
''# Input Parameters      			: Target_class / label, Vectorized Data from Pre-processing
''# Outputs Parameters   			: Model File Object will be returned,Function execution success flag,Function execution Status Description
''# Author     						: Eugene Yankovsky
#'#****************************************************************************************************************************************************

#Define Model Training function below:
#-------------------------------------#	

def model_train(target_class, vectorized_data):

    try:
        model = SGDClassifier(loss='hinge', alpha=0.0000006, random_state=201801, max_iter=1)
        model.fit(vectorized_data, target_class)
        success_flag = 'yes'
        status_desc = 'Model Training Successfully Completed'
        return(model,success_flag,status_desc)
    except Exception as error_desc: 
        status_desc = error_desc
        success_flag = 'no'
        model = ''
    return(model,success_flag,status_desc)

# PREDICTION

#'#****************************************************************************************************************************************************
''# Description  					: Code to perform prediction on new data
''# Steps Followed					: Includes the prediction execution & new predicted column creation
''# Input Parameters      			: Model_file, Training_Data, Prediction_Data
''# Output Parameters   			: Predicted File will be returned with new predicted target_class column & confidence score of prediciton per row,
''#									  Function execution success flag,Function execution Status Description
''# Author     						: Eugene Yankovsky
#'#****************************************************************************************************************************************************

#Define Prediction function below:
#-------------------------------------#

def prediction(model, Training_Data, Prediction_Data):
    status_desc = ''
    success_flag = ''
    try:
        p1, p2, p3, p4, p5= pre_processing(Prediction_Data,Training_Data) # Pre-processing function called inside the Prediction Function
        pred_vectorized_data=p3
        Predicted_class = model.predict(pred_vectorized_data)
        Prediction_Data["RECOMMENDATION"]=pd.Series(Predicted_class).values
        codestring
        low_precision_codelist = codestring.split()
        Prediction_Data["RECOMMENDATION"] = Prediction_Data["RECOMMENDATION"].apply(lambda x: x if x not in low_precision_codelist else 'Manual Classification Needed')
        success_flag = 'yes'
        status_desc = 'Prediction Successfully Completed'
    except Exception as error_desc:
        status_desc =  error_desc
        success_flag = 'no'
    return(Prediction_Data,success_flag,status_desc)




#-----------------------------------------------------------------------------------------------------------------------------------------------------------------#


